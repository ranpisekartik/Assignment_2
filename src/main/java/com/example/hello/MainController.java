package com.example.hello;



import java.io.IOException;
import java.util.ArrayList;
import java.util.Base64;
import java.util.HashMap;
import java.util.Optional;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.servlet.ModelAndView;

import com.example.hello.models.FavTeams;
import com.example.hello.services.AdminService;
import com.example.hello.services.AuthService;
import com.example.hello.services.FavTeam;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;


@Controller    // This means that this class is a Controller
@RequestMapping(path="/") // This means URL's start with /demo (after Application path)
public class MainController {
	
	@Autowired
	private AdminService adminService;
	
	@Autowired
	private FavTeamRepo favRepo;

	@Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository1 UserRepository1;
	
	@Autowired
	private AuthService authService;
	
	@Autowired
	private FavTeam favTeam;
	
	
	
	@RequestMapping(path="/") // Map ONLY GET Requests
	public ModelAndView renderIndex1() {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		ModelAndView m = new ModelAndView();
		m.setViewName("index1");
		
		return m;
	}
	
	@RequestMapping(path="/index") // Map ONLY GET Requests
	public ModelAndView renderIndex() {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		ModelAndView m = new ModelAndView();
		
		m.setViewName("index");
		
		return m;
	}
	
	@RequestMapping(path="/Logout") // Map ONLY GET Requests
	public ModelAndView renderIndex2() {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		ModelAndView m = new ModelAndView();
		m.setViewName("logout");
		
		return m;
	}
	
	@PostMapping("/login") // Map ONLY GET Requests
	public ModelAndView handlelogin(@RequestParam("userID") String userID,
			@RequestParam("userName") String userName, @RequestParam("userEmail") String userEmail, HttpSession session) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		Long userID1 = Long.parseLong(userID);	
		System.out.println(userID1+ userName + userEmail);
		session.setAttribute("userID", userID1);
		Optional<User_Entity> u = getUserByID(userID1);
		
		User_Entity u1 = u.get();
		ModelAndView m = new ModelAndView();
		
		if(authService.isUniqueID(userID1)) {
			User_Entity user = new User_Entity();
			user.setUserID(userID1);
			user.setName(userName);
			user.setActivity(false);
			user.setFavTeams(null);
		
		
			UserRepository1.save(user);
		} else if(u1!=null && u1.isBlocked()== true) {
			m.setViewName("blocked");
			return m;
		} 
		
		
		m.setViewName("index");
		m.addObject("Name", UserRepository1.findAll());
		return m;
		
	}
	
	public  Optional<User_Entity> getUserByID(Long userId) {

		Optional<User_Entity> user = null;
		user = UserRepository1.findById(userId);
		return user;
	}
	
	@GetMapping(path="/all")
	public @ResponseBody Iterable<User_Entity> getAllUsers() {
		// This returns a JSON or XML with the users
		return UserRepository1.findAll();
	}
	
	@RequestMapping(method=RequestMethod.POST, value="/action")
	public String handleUser(Model model, @RequestParam String user, @RequestParam String action) {
		System.out.println(user);
		System.out.println(action);
		if(action.equals("block")) {
			Boolean x = adminService.blockUser(user);
			
		}else {
			Boolean x = adminService.unblockUser(user);
			
		}

		
		return "redirect:/adminpanel";
	}
	
	//@RequestMapping(method = RequestMethod.GET, value = "/adminpanel")
	@GetMapping("/adminpanel")
	public String getAdmin(Model model, HttpSession session) {
		model.addAttribute("Accounts", UserRepository1.findAll());
		return "adminpanel";
	}


		@GetMapping(path="/FavGames")
	    public ModelAndView FavGames() {
			ModelAndView m = new ModelAndView();
	        m.setViewName("select Favorite teams");
	        m.addObject("name", "Bharghav");
	        return m;
	    }
		
		
		@PostMapping(path="/fav")
		   public ModelAndView saveStuff1(
					 @RequestParam String favGame, HttpSession session) {
			
			Object id = session.getAttribute("userID");
			Long userId = Long.parseLong(id.toString());
			System.out.println("Bharghav id" +id.toString());
			Optional<User_Entity> u = UserRepository1.findById(userId);
			User_Entity user = u.get(); 
			System.out.println("Bharghav Name" +user.getName());
			if(userId!=null) {
			favRepo.deleteAll();
		      String token[] = favGame.split(",");
		      ArrayList<String> favt= new ArrayList<String>();
		        for(int i=0;i<token.length;i++) {
		        	favt.add(token[i]);
		        
		        }
		      FavTeams fav = new FavTeams();
		      fav.setFavTeam(favt);
		      fav.setSelectedBy(user);
		      
		        for(int i=0;i<favt.size();i++) {
		        	System.out.println("Bharghav1"+ favt.get(i) );  
		        }
		        
		    favRepo.save(fav);
			}
		      /*System.out.println("Bharghav" +favGame);
		      User t =new User();
		      if(favGame.equals("WW")) {
		    	  t.setFavGame("Washington Wizards");
		    	  
		      }
		      else if(favGame.equals("LAC")) {
		    	  t.setFavGame("Los Angeles Clippers");
		    	  
		      }
		      
		      else if(favGame.equals("MH")) {
		    	  t.setFavGame("Miami Heat");
		    	  
		      }
		     
		      System.out.println(favGame);*/
		     
		     // }
		      
		     /* ModelAndView m = new  ModelAndView("index");     

		      m.addObject("favTeam", favRepo.findAll());
		      return m;*/
		    ModelAndView m = new  ModelAndView();
		    m.setViewName("redirect:/myfavteam");
		    return m;
		   }
		
		@RequestMapping(method = RequestMethod.GET, value = "/myfavteam")
		public ModelAndView myActivities(ModelAndView modelAndView, HttpSession session) {

			Object id = session.getAttribute("userID");
			Long userId = Long.parseLong(id.toString());
			System.out.println("Bharghav id2" +id.toString());
			Optional<User_Entity> u = UserRepository1.findById(userId);
			User_Entity user = u.get(); 
			if (userId!=null) {
				modelAndView.addObject("favTeam", favTeam.getFavTeams(user));
				modelAndView.setViewName("index");

			} /*else {

				LoginForm loginForm = new LoginForm();
				modelAndView.addObject("loginForm", loginForm);
				modelAndView.setViewName("redirect:/login");

			}*/
			return modelAndView;
		}

		
		@GetMapping(path="/all1")
		public @ResponseBody Iterable<FavTeams> getAllUsers1() {
			// This returns a JSON or XML with the users
			return favRepo.findAll();
		}
		
		@RequestMapping(value = { "/blocked" }, method = RequestMethod.GET)
		public ModelAndView blocked(ModelAndView modelAndView) {

			modelAndView.setViewName("blocked");
			return modelAndView;
		}
		
		//Using PoJo Classes
		@GetMapping("/teams")
		public ModelAndView getTeams() {
			ModelAndView showTeams = new ModelAndView("showTeams");
			showTeams.addObject("name", "Bharghav"); 
			ArrayList<String> teamNames = new ArrayList<String>();
			//Endpoint to call
			String url ="https://api.mysportsfeeds.com/v1.2/pull/nba/2018-2019-regular/overall_team_standings.json";
			//Encode Username and Password
	        String encoding = Base64.getEncoder().encodeToString("e1591372-4f04-4797-b24f-bd817b:Mahadeva1".getBytes());
	        //581f5037-d4ed-4478-a976-91442e:2rbLd9MORLPc
	        // TOKEN:PASS
	        //Add headers
			HttpHeaders headers = new HttpHeaders();
			headers.setContentType(MediaType.APPLICATION_JSON);
			headers.set("Authorization", "Basic "+encoding);
			HttpEntity<String> request = new HttpEntity<String>(headers);

			//Make the call
			RestTemplate restTemplate = new RestTemplate();
			ResponseEntity<NBATeamStanding> response = restTemplate.exchange(url, HttpMethod.GET, request, NBATeamStanding.class);
			NBATeamStanding ts = response.getBody(); 
	        System.out.println(ts.toString());
			//Send the object to view
	        showTeams.addObject("teamStandingEntries", ts.overallteamstandings.teamstandingsentries);
	        System.out.println(ts.overallteamstandings.teamstandingsentries);
	        /*for(teamstandingsentry team1 : ts.overallteamstandings.teamstandingsentries) {
	        	teamNames.add(team1.team.Name);
	        }
	        showTeams.addObject("teamNames", teamNames);
			return showTeams;*/
	        return showTeams;
		}
		
		//Using objectMapper
		@GetMapping("/team")
		public ModelAndView getTeamInfo(
				@RequestParam("id") String teamID 
				) {
			ModelAndView teamInfo = new ModelAndView("teamInfo");
			ArrayList<HashMap<String, String>> gameDetails = new ArrayList<HashMap<String, String>>();
			String url = "https://api.mysportsfeeds.com/v1.2/pull/nba/2018-2019-regular/team_gamelogs.json?team=" + teamID;
			String encoding = Base64.getEncoder().encodeToString("e1591372-4f04-4797-b24f-bd817b:Mahadeva1".getBytes());
	        
			HttpHeaders headers = new HttpHeaders();
			headers.setContentType(MediaType.APPLICATION_JSON);
			headers.set("Authorization", "Basic "+encoding);
			HttpEntity<String> request = new HttpEntity<String>(headers);

			
			
			RestTemplate restTemplate = new RestTemplate();
			ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.GET, request, String.class);
			String str = response.getBody(); 
			ObjectMapper mapper = new ObjectMapper();
			try {
				JsonNode root = mapper.readTree(str);
				System.out.println("1"+str);
				//JsonNode jsonNode1 = actualObj.get("lastUpdatedOn");
		        System.out.println("2"+root.get("teamgamelogs").get("lastUpdatedOn").asText());
		        System.out.println("3"+root.get("teamgamelogs").get("gamelogs").getNodeType());
		        JsonNode gamelogs = root.get("teamgamelogs").get("gamelogs");
		        
		        if(gamelogs.isArray()) {
		        	
		        	gamelogs.forEach(gamelog -> {
		        		JsonNode game = gamelog.get("game");		
		        		HashMap<String,String> gameDetail = new HashMap<String, String>();
		        		gameDetail.put("id", game.get("id").asText());
		        		gameDetail.put("date", game.get("date").asText());
		        		gameDetail.put("time", game.get("time").asText());
		        		gameDetail.put("awayTeam", game.get("awayTeam").get("Abbreviation").asText());
		        		gameDetails.add(gameDetail);
		        		
		        	});
		        }
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		 
			teamInfo.addObject("gameDetails", gameDetails);
			
	        
			return teamInfo;
		}
	
}